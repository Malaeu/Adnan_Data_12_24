age >= 55 & age < 70 ~ "55-70",
age >= 70 ~ "≥70",
TRUE ~ NA_character_
),
# Остальные переменные без изменений...
[предыдущий код]
# Обновленная функция без дублирования переменных времени и статуса
update_liver_dataset <- function(df) {
df_updated <- df %>%
# Сначала удаляем старые переменные time и status, если они есть
select(-any_of(c("time", "status"))) %>%
mutate(
# 1. Базовые временные переменные
year = format(date_of_wl, "%Y"),
age = as.numeric(difftime(date_of_wl, date_of_birth, units = "days"))/365.25,
# 2. Правильные переменные времени и статуса
surv_time = as.numeric(difftime(
coalesce(todesdatum, last_contact),  # конечная дата
date_of_wl,                          # начальная дата
units = "days"
)),
# Фиксим отрицательное время
surv_time = if_else(surv_time < 0, 0, surv_time),
# Статус: 1 = смерть, 0 = жив/цензурирован
surv_status = ifelse(!is.na(todesdatum), 1, 0),
# 3. Группировки
period = case_when(
year <= "2015" ~ "2010-2015",
year <= "2020" ~ "2016-2020",
TRUE ~ "2021+"
),
age_group = case_when(
age >= 18 & age < 40 ~ "<40",
age >= 40 & age < 55 ~ "40-55",
age >= 55 & age < 70 ~ "55-70",
age >= 70 ~ "≥70",
TRUE ~ NA_character_
),
# Остальные переменные без изменений...
[предыдущий код]
# Обновленная функция с фильтром по возрасту
# Обновленная функция без дублирования переменных времени и статуса
update_liver_dataset <- function(df) {
df_updated <- df %>%
# Сначала удаляем старые переменные time и status, если они есть
select(-any_of(c("time", "status"))) %>%
mutate(
# 1. Базовые временные переменные
year = format(date_of_wl, "%Y"),
age = as.numeric(difftime(date_of_wl, date_of_birth, units = "days"))/365.25,
# 2. Правильные переменные времени и статуса
surv_time = as.numeric(difftime(
coalesce(todesdatum, last_contact),  # конечная дата
date_of_wl,                          # начальная дата
units = "days"
)),
# Фиксим отрицательное время
surv_time = if_else(surv_time < 0, 0, surv_time),
# Статус: 1 = смерть, 0 = жив/цензурирован
surv_status = ifelse(!is.na(todesdatum), 1, 0),
# 3. Группировки
period = case_when(
year <= "2015" ~ "2010-2015",
year <= "2020" ~ "2016-2020",
TRUE ~ "2021+"
),
age_group = case_when(
age >= 18 & age < 40 ~ "<40",
age >= 40 & age < 55 ~ "40-55",
age >= 55 & age < 70 ~ "55-70",
age >= 70 ~ "≥70",
TRUE ~ NA_character_
),
# Остальные переменные без изменений...
meld_group = case_when(
lab_meld <= 15 ~ "Low MELD (≤15)",
lab_meld <= 25 ~ "Medium MELD (16-25)",
lab_meld > 25 ~ "High MELD (>25)",
TRUE ~ NA_character_
),
bmi = if_else(is.na(bmi) & !is.na(weight) & !is.na(height),
as.numeric(weight)/(height/100)^2,
bmi),
bmi_group = case_when(
bmi < 18.5 ~ "Underweight",
bmi < 25 ~ "Normal",
bmi < 30 ~ "Overweight",
bmi >= 30 ~ "Obese",
TRUE ~ NA_character_
),
has_ascites = str_detect(tolower(diagnosis), "scites"),
has_varices = str_detect(tolower(diagnosis), "arizen|arices"),
has_encephalopathy = str_detect(tolower(diagnosis), "encephalo|enzephalo"),
has_splenomegaly = str_detect(tolower(diagnosis), "spleno|splenomegalie"),
is_relisting = !is.na(relisting_date),
received_ltx = !is.na(date_of_ltx),
time_to_ltx = as.numeric(difftime(date_of_ltx, date_of_wl, units = "days")),
sex = as.factor(sex),
blood_type = as.factor(blood_type),
rh = as.factor(rh),
urgency = as.factor(urgency),
meld_group = as.factor(meld_group),
age_group = as.factor(age_group),
period = as.factor(period)
) %>%
# Фильтруем по возрасту и году
filter(
age >= 18,  # только взрослые
year > "2009"  # после 2009 года
)
return(df_updated)
}
# Применяем обновление
wl_df_updated <- update_liver_dataset(wl_df)
# Проверяем результаты
validation_summary <- wl_df_updated %>%
summarise(
n_total = n(),
n_adults = sum(age >= 18, na.rm = TRUE),
min_age = min(age, na.rm = TRUE),
max_age = max(age, na.rm = TRUE),
mean_age = mean(age, na.rm = TRUE),
median_age = median(age, na.rm = TRUE),
age_distribution = list(table(age_group))
)
print("Валидация обновленного датасета:")
print(validation_summary)
# Проверяем распределение по возрастным группам
age_distribution <- wl_df_updated %>%
count(age_group) %>%
mutate(
pct = round(n/sum(n)*100, 1),
cumulative_pct = cumsum(pct)
)
print("\nРаспределение по возрастным группам:")
print(age_distribution)
# Сохраняем обновленный датасет
saveRDS(wl_df_updated, "wl_df_updated.rds")
# Базовая статистика по группам циррозов
cirrhosis_summary <- wl_df_updated %>%
filter(str_detect(diagnosis_grouped, "Cirrhosis")) %>%
group_by(diagnosis_grouped) %>%
summarise(
n = n(),
mean_age = round(mean(age, na.rm = TRUE), 1),
mean_meld = round(mean(lab_meld, na.rm = TRUE), 1),
death_rate = round(mean(surv_status, na.rm = TRUE) * 100, 1),
transplant_rate = round(mean(received_ltx, na.rm = TRUE) * 100, 1),
ascites_rate = round(mean(has_ascites, na.rm = TRUE) * 100, 1),
varices_rate = round(mean(has_varices, na.rm = TRUE) * 100, 1)
) %>%
arrange(desc(n))
print("\nСводка по группам циррозов:")
print(cirrhosis_summary)
# ```
#
df_status(wl_df_updated)
wl_df_updated$bmi_group
wl_combined_adult_18plus_bca <- readRDS("~/Dokumente/Statistik/Adnan/Daten/DR_Adnan_Statistik/cl_adnan/Data_Sets/combining/wl_combined_adult_18plus_bca.rds")
df_status(wl_combined_adult_18plus_bca)
df_status(wl_df_updated)
# 1. Проверяем etnr в обоих датасетах
etnr_check <- list(
wl_df = wl_df_updated %>%
summarise(
n_total = n(),
n_etnr = sum(!is.na(etnr)),
n_unique_etnr = n_distinct(etnr)
),
bca_df = wl_combined_adult_18plus_bca %>%
summarise(
n_total = n(),
n_etnr = sum(!is.na(etnr)),
n_unique_etnr = n_distinct(etnr)
)
)
print("Проверка etnr в датасетах:")
print(etnr_check)
# 2. Проверяем пересечение etnr
etnr_overlap <- inner_join(
wl_df_updated %>% select(etnr) %>% distinct(),
wl_combined_adult_18plus_bca %>% select(etnr) %>% distinct(),
by = "etnr"
)
print("\nКоличество пересекающихся etnr:")
print(nrow(etnr_overlap))
# 3. Объединяем датасеты
merged_df <- wl_df_updated %>%
left_join(
wl_combined_adult_18plus_bca %>%
select(etnr, bone, muscle, sat, vat, imat, eat, pat, tat,
date_of_ct, acsn_nr),  # выбираем только нужные колонки из BCA
by = "etnr"
)
# 4. Проверяем результат объединения
merge_check <- merged_df %>%
summarise(
n_total = n(),
n_with_bca = sum(!is.na(bone)),
pct_with_bca = round(mean(!is.na(bone)) * 100, 1),
n_with_ct = sum(!is.na(date_of_ct))
)
print("\nРезультаты объединения:")
print(merge_check)
# 5. Проверяем распределение BCA данных по группам диагнозов
bca_by_diagnosis <- merged_df %>%
group_by(diagnosis_grouped) %>%
summarise(
n_total = n(),
n_with_bca = sum(!is.na(bone)),
pct_with_bca = round(mean(!is.na(bone)) * 100, 1)
) %>%
arrange(desc(n_total))
print("\nРаспределение BCA данных по диагнозам:")
print(bca_by_diagnosis)
# 6. Сохраняем объединенный датасет
saveRDS(merged_df, "wl_df_with_bca.rds")
# 7. Базовая статистика по BCA переменным
bca_stats <- merged_df %>%
summarise(
across(c(bone, muscle, sat, vat, imat, eat, pat, tat),
list(
n = ~sum(!is.na(.)),
mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
median = ~median(., na.rm = TRUE)
),
.names = "{.col}_{.fn}")
)
print("\nСтатистика по BCA переменным:")
print(bca_stats)
wl_df_with_bca <- readRDS("~/Dokumente/Statistik/Adnan/Daten/DR_Adnan_Statistik/cl_adnan/Data_Sets/combining/wl_df_with_bca.rds")
library(tidyverse)
library(caret)
library(pROC)
library(parallel)
library(doParallel)
library(car)
library(gtsummary)
library(gt)
# Загружаем данные
df <- readRDS("wl_df_with_bca.rds")
# Определяем группы переменных для анализа
binary_vars <- c(
"surv_status", "has_ascites", "has_varices",
"has_encephalopathy", "has_splenomegaly",
"is_relisting", "received_ltx"
)
ordinal_vars <- c(
"age_group", "meld_group", "bmi_group", "period"
)
numeric_vars <- c(
"age", "lab_meld", "bmi", "bone", "muscle",
"sat", "vat", "imat", "eat", "pat", "tat"
)
# Подготавливаем данные
df_analysis <- df %>%
# Фильтруем только случаи с циррозом
filter(str_detect(diagnosis_grouped, "Cirrhosis")) %>%
mutate(
# Бинарные переменные в факторы
across(all_of(binary_vars),
~factor(., levels = c(FALSE, TRUE), labels = c("No", "Yes"))),
# Преобразуем пол
sex = factor(sex, levels = c("M", "W"), labels = c("Male", "Female")),
# Числовые переменные
across(all_of(numeric_vars), as.numeric)
)
# Создаем метки для переменных
var_labels <- list(
surv_status ~ "Mortality",
age ~ "Age",
sex ~ "Sex",
lab_meld ~ "MELD score",
bmi ~ "BMI",
has_ascites ~ "Ascites",
has_varices ~ "Varices",
has_encephalopathy ~ "Encephalopathy",
has_splenomegaly ~ "Splenomegaly",
bone ~ "Bone tissue",
muscle ~ "Muscle tissue",
sat ~ "Subcutaneous adipose tissue",
vat ~ "Visceral adipose tissue",
imat ~ "Intermuscular adipose tissue",
eat ~ "Epicardial adipose tissue",
pat ~ "Paraaortic adipose tissue",
tat ~ "Total adipose tissue",
diagnosis_grouped ~ "Cirrhosis type"
)
# Создаем таблицу характеристик
tbl_univariate <- df_analysis %>%
select(surv_status, age, sex, lab_meld, bmi,
has_ascites:has_splenomegaly,
bone:tat, diagnosis_grouped) %>%
tbl_summary(
by = surv_status,
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"
),
digits = all_continuous() ~ 1,
label = var_labels
) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 3)) %>%
add_overall() %>%
add_n() %>%
modify_header(label = "**Characteristic**") %>%
modify_spanning_header(all_stat_cols() ~ "**Mortality**") %>%
modify_caption("**Table 1. Patient characteristics by mortality status**")
library(tidyverse)
library(caret)
library(pROC)
library(gtsummary)
library(gt)
# Загружаем данные
df <- readRDS("wl_df_with_bca.rds")
# Сначала проверим наши данные
print("Проверка данных:")
df %>%
summarise(
total_rows = n(),
missing_surv_status = sum(is.na(surv_status)),
missing_bca = sum(is.na(bone)),
complete_cases = sum(complete.cases(.))
) %>%
print()
# Подготавливаем данные для анализа
df_analysis <- df %>%
# Фильтруем только случаи с циррозом
filter(
str_detect(diagnosis_grouped, "Cirrhosis"),
!is.na(surv_status)  # убираем NA в surv_status
) %>%
mutate(
# Создаем факторную переменную для статуса
mortality = factor(surv_status,
levels = c(0, 1),
labels = c("Alive", "Deceased")),
# Преобразуем пол
sex = factor(sex, levels = c("M", "W"),
labels = c("Male", "Female")),
# Группируем MELD score
meld_cat = cut(lab_meld,
breaks = c(0, 15, 25, Inf),
labels = c("Low", "Medium", "High"),
include.lowest = TRUE),
# Группируем возраст
age_cat = cut(age,
breaks = c(0, 40, 55, 70, Inf),
labels = c("<40", "40-55", "55-70", ">70"),
include.lowest = TRUE)
)
# Проверяем подготовленные данные
print("\nПодготовленные данные:")
summary(df_analysis)
# Создаем таблицу характеристик
tbl_univariate <- df_analysis %>%
select(
# Демографические данные
mortality, age_cat, sex,
# Клинические параметры
meld_cat, bmi,
# Осложнения
has_ascites, has_varices, has_encephalopathy, has_splenomegaly,
# BCA параметры
bone, muscle, sat, vat, imat, eat, pat, tat,
# Диагноз
diagnosis_grouped
) %>%
tbl_summary(
by = mortality,
missing = "no",  # Как обрабатывать пропущенные значения
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"
),
digits = all_continuous() ~ 1
) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 3)) %>%
add_overall() %>%
add_n() %>%
modify_header(label = "**Characteristic**") %>%
modify_spanning_header(all_stat_cols() ~ "**Mortality Status**") %>%
modify_caption("**Table 1. Patient characteristics by mortality status**")
Сначала проверим наши данные
# Сначала проверим наши данные
print("Проверка данных:")
df %>%
summarise(
total_rows = n(),
missing_surv_status = sum(is.na(surv_status)),
missing_bca = sum(is.na(bone)),
complete_cases = sum(complete.cases(.))
) %>%
print()
library(tidyverse)
library(caret)
library(pROC)
library(gtsummary)
library(gt)
# Загружаем и фильтруем данные только с BCA
df_bca <- readRDS("wl_df_with_bca.rds") %>%
filter(!is.na(bone))  # фильтруем только случаи с BCA данными
# Проверяем данные
print("Статистика по BCA данным:")
df_bca %>%
summarise(
total_bca_patients = n(),
cirrhosis_patients = sum(str_detect(diagnosis_grouped, "Cirrhosis")),
deaths = sum(surv_status == 1),
mean_age = mean(age, na.rm = TRUE),
mean_meld = mean(lab_meld, na.rm = TRUE)
) %>%
print()
# Подготавливаем данные для анализа
df_analysis <- df_bca %>%
filter(str_detect(diagnosis_grouped, "Cirrhosis")) %>%
mutate(
# Создаем факторы
mortality = factor(surv_status,
levels = c(0, 1),
labels = c("Alive", "Deceased")),
sex = factor(sex, levels = c("M", "W"),
labels = c("Male", "Female")),
# Категоризируем непрерывные переменные
meld_cat = cut(lab_meld,
breaks = c(0, 15, 25, Inf),
labels = c("Low", "Medium", "High")),
age_cat = cut(age,
breaks = c(0, 40, 55, 70, Inf),
labels = c("<40", "40-55", "55-70", ">70")),
# Стандартизируем BCA переменные
across(c(bone, muscle, sat, vat, imat, eat, pat, tat),
~scale(.), .names = "scaled_{.col}")
)
# Создаем таблицу характеристик
tbl_univariate <- df_analysis %>%
select(
# Исход
mortality,
# Демография
age_cat, sex,
# Клинические параметры
meld_cat, bmi,
# Осложнения
has_ascites, has_varices, has_encephalopathy, has_splenomegaly,
# BCA параметры (используем стандартизированные)
starts_with("scaled_"),
# Диагноз
diagnosis_grouped
) %>%
tbl_summary(
by = mortality,
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"
),
digits = all_continuous() ~ 2
) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 3)) %>%
add_overall() %>%
add_n() %>%
modify_header(label = "**Characteristic**") %>%
modify_spanning_header(all_stat_cols() ~ "**Mortality Status**") %>%
modify_caption("**Table 1. Patient characteristics by mortality status (BCA cohort)**")
# Логистическая регрессия
log_model <- glm(mortality ~ age_cat + sex + meld_cat +
scaled_bone + scaled_muscle + scaled_sat +
scaled_vat + scaled_imat + scaled_eat +
scaled_pat + scaled_tat +
has_ascites + has_varices +
has_encephalopathy + has_splenomegaly,
data = df_analysis,
family = binomial())
# Таблица мультивариатного анализа
tbl_multivariate <- log_model %>%
tbl_regression(
exponentiate = TRUE
) %>%
modify_header(label = "**Predictor**") %>%
modify_caption("**Table 2. Logistic regression results (BCA cohort)**")
# Логистическая регрессия
log_model <- glm(mortality ~ age_cat + sex + meld_cat +
scaled_bone + scaled_muscle + scaled_sat +
scaled_vat + scaled_imat + scaled_eat +
scaled_pat + scaled_tat +
has_ascites + has_varices +
has_encephalopathy + has_splenomegaly,
data = df_analysis,
family = binomial())
# Таблица мультивариатного анализа
tbl_multivariate <- log_model %>%
tbl_regression(
exponentiate = TRUE
) %>%
modify_header(label = "**Predictor**") %>%
modify_caption("**Table 2. Logistic regression results (BCA cohort)**")
# Таблица мультивариатного анализа
tbl_multivariate <- log_model %>%
tbl_regression(
exponentiate = TRUE
) %>%
modify_header(label = "**Predictor**") %>%
modify_caption("**Table 2. Logistic regression results (BCA cohort)**")
install.packages("broom.helpers")
# Таблица мультивариатного анализа
tbl_multivariate <- log_model %>%
tbl_regression(
exponentiate = TRUE
) %>%
modify_header(label = "**Predictor**") %>%
modify_caption("**Table 2. Logistic regression results (BCA cohort)**")
